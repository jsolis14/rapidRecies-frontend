[{"/home/jesse14/Desktop/rapid-recipes/rapid-recipes-frontend/src/index.tsx":"1","/home/jesse14/Desktop/rapid-recipes/rapid-recipes-frontend/src/reportWebVitals.ts":"2","/home/jesse14/Desktop/rapid-recipes/rapid-recipes-frontend/src/App.tsx":"3","/home/jesse14/Desktop/rapid-recipes/rapid-recipes-frontend/src/components/Home/Home.tsx":"4","/home/jesse14/Desktop/rapid-recipes/rapid-recipes-frontend/src/components/user/Login.tsx":"5","/home/jesse14/Desktop/rapid-recipes/rapid-recipes-frontend/src/components/user/Register.tsx":"6","/home/jesse14/Desktop/rapid-recipes/rapid-recipes-frontend/src/components/user/TestAuth.tsx":"7","/home/jesse14/Desktop/rapid-recipes/rapid-recipes-frontend/src/components/NavBar/NavBar.tsx":"8"},{"size":2187,"mtime":1611263487945,"results":"9","hashOfConfig":"10"},{"size":425,"mtime":1607982647474,"results":"11","hashOfConfig":"10"},{"size":900,"mtime":1611264401405,"results":"12","hashOfConfig":"10"},{"size":201,"mtime":1608225375167,"results":"13","hashOfConfig":"10"},{"size":1531,"mtime":1610473861749,"results":"14","hashOfConfig":"10"},{"size":1794,"mtime":1608230194387,"results":"15","hashOfConfig":"10"},{"size":573,"mtime":1610476988399,"results":"16","hashOfConfig":"10"},{"size":1360,"mtime":1611264926165,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"21"},"bmsm8w",{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"21"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"21"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"21"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"21"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/jesse14/Desktop/rapid-recipes/rapid-recipes-frontend/src/index.tsx",["40"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ApolloClient, createHttpLink, InMemoryCache } from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nimport { ApolloProvider } from '@apollo/client';\nimport jwt_decode, { JwtDecodeOptions } from \"jwt-decode\";\n\n\ninterface JWTDecode {\n  exp: number,\n  iat: number,\n  userId: String\n}\n\nfunction isTokenValid(token: string): boolean {\n\n  try {\n    const { exp }: JWTDecode = jwt_decode(token)\n    if (Date.now() >= exp * 1000) {\n      return false\n    }\n  } catch {\n    return false\n  }\n\n  return true\n}\n\nconst httpLink = createHttpLink({\n  uri: 'http://localhost:4000/graphql',\n  credentials: 'include'\n});\n\nconst authLink = setContext(async (_, { headers }) => {\n  // get the authentication token from local storage if it exists\n  let token = localStorage.getItem('accessToken');\n  // return the headers to the context so httpLink can read them\n\n  // try refresh token if no access token\n  if (token) {\n    if (!isTokenValid(token)) {\n      console.log('token is expired')\n      // try the refresh token\n      const res = await fetch('http://localhost:4000/refresh_token', { method: 'POST', credentials: 'include' })\n      const { ok, accessToken } = await res.json()\n\n      if (ok) {\n        token = accessToken\n        localStorage.setItem('accessToken', accessToken)\n      } else {\n        token = ''\n        localStorage.setItem('accessToken', '')\n\n      }\n    }\n\n\n  }\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : \"\",\n    }\n  }\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n  credentials: 'include'\n});\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["41","42"],"/home/jesse14/Desktop/rapid-recipes/rapid-recipes-frontend/src/reportWebVitals.ts",[],"/home/jesse14/Desktop/rapid-recipes/rapid-recipes-frontend/src/App.tsx",["43","44","45"],"/home/jesse14/Desktop/rapid-recipes/rapid-recipes-frontend/src/components/Home/Home.tsx",["46"],"import React from 'react';\nimport { Link } from 'react-router-dom'\ninterface Props {\n\n}\n\nexport const Home: React.FC<Props> = () => {\n    return (\n        <div>\n            Home\n        </div>\n    )\n}\n","/home/jesse14/Desktop/rapid-recipes/rapid-recipes-frontend/src/components/user/Login.tsx",["47"],"import React, { useState } from 'react';\nimport { useMutation, gql } from '@apollo/client';\nimport { RouteComponentProps } from 'react-router-dom';\n\nconst LOGIN = gql`\nmutation Login($email: String!, $password: String!){\n    login(email: $email, password:$password){\n      acessToken\n      user{\n        email\n      }\n      errors{\n        path\n        message\n      }\n    }\n  }\n`\n\nexport const Login: React.FC<RouteComponentProps> = ({ history }) => {\n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n    const [login, { data }] = useMutation(LOGIN)\n\n    async function submitForm(e: React.FormEvent<HTMLFormElement>, mutation: any, variables: any) {\n        e.preventDefault()\n        const res = await mutation(variables)\n\n        if (res && res.data) {\n            localStorage.setItem('accessToken', res.data.login.acessToken)\n        }\n\n        history.push('/')\n        console.log(res)\n    }\n    return (\n        <div>\n            <form onSubmit={e => submitForm(e, login, { variables: { email, password } })}>\n                <div>\n                    <input value={email} onChange={e => setEmail(e.target.value)} type='email' placeholder='email' />\n                </div>\n                <div>\n                    <input value={password} onChange={e => setPassword(e.target.value)} type='password' placeholder='password' />\n                </div>\n                <div>\n                    <button>Login</button>\n                </div>\n            </form>\n        </div>\n    )\n}\n","/home/jesse14/Desktop/rapid-recipes/rapid-recipes-frontend/src/components/user/Register.tsx",["48"],"import React, { useState } from 'react';\nimport { useMutation, gql } from '@apollo/client';\nimport { RouteComponentProps } from 'react-router-dom';\n\ninterface Props {\n\n}\n\nconst REGISTER = gql`\nmutation Register($email: String!, $password: String!, $firstName: String!, $lastName: String!){\n\tregister(email: $email, password: $password, firstName: $firstName, lastName: $lastName){\n    user{\n      id\n      email\n    }\n  }\n}\n`\nexport const Register: React.FC<RouteComponentProps> = ({ history }) => {\n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n    const [firstName, setFirstName] = useState('')\n    const [lastName, setLastName] = useState('')\n    const [register, { data }] = useMutation(REGISTER)\n\n    async function submitForm(e: React.FormEvent<HTMLFormElement>, mutation: any, variables: any) {\n        e.preventDefault()\n        const res = await mutation(variables)\n        history.push('/')\n        console.log(res)\n    }\n\n    return (\n        <div>\n            <form onSubmit={e => submitForm(e, register, { variables: { email, password, firstName, lastName } })}>\n                <input value={email} placeholder=\"Email\" onChange={(e) => setEmail(e.target.value)} />\n                <input value={password} type=\"password\" placeholder=\"Password\" onChange={(e) => setPassword(e.target.value)} />\n                <input value={firstName} placeholder=\"First Name\" onChange={(e) => setFirstName(e.target.value)} />\n                <input value={lastName} placeholder=\"Last Name\" onChange={(e) => setLastName(e.target.value)} />\n                <button type=\"submit\">Submit</button>\n            </form>\n            <div>\n                {data ? data.register.user.email : 'mutation not made yet'}\n            </div>\n        </div>\n\n\n    )\n}\n","/home/jesse14/Desktop/rapid-recipes/rapid-recipes-frontend/src/components/user/TestAuth.tsx",["49"],"import React from 'react';\nimport { gql, useQuery } from '@apollo/client';\nimport { RouteComponentProps } from 'react-router-dom';\nconst TEST_ACCESS = gql`\n  query TestAccess{\n      testAccess\n  }\n`;\n\nexport const TestAuth: React.FC<RouteComponentProps> = () => {\n    const { loading, error, data } = useQuery(TEST_ACCESS);\n\n    if (loading) {\n        return (<div>Loading...</div>)\n    }\n    if (error) {\n        console.log(error)\n        return (<div>\n            error\n        </div>\n        )\n    }\n\n    return (\n        <div>\n            done\n        </div>\n\n    )\n}\n","/home/jesse14/Desktop/rapid-recipes/rapid-recipes-frontend/src/components/NavBar/NavBar.tsx",["50","51"],{"ruleId":"52","severity":1,"message":"53","line":8,"column":22,"nodeType":"54","messageId":"55","endLine":8,"endColumn":38},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"52","severity":1,"message":"60","line":1,"column":10,"nodeType":"54","messageId":"55","endLine":1,"endColumn":18},{"ruleId":"52","severity":1,"message":"61","line":3,"column":40,"nodeType":"54","messageId":"55","endLine":3,"endColumn":44},{"ruleId":"52","severity":1,"message":"62","line":9,"column":7,"nodeType":"54","messageId":"55","endLine":9,"endColumn":12},{"ruleId":"52","severity":1,"message":"61","line":2,"column":10,"nodeType":"54","messageId":"55","endLine":2,"endColumn":14},{"ruleId":"52","severity":1,"message":"63","line":23,"column":21,"nodeType":"54","messageId":"55","endLine":23,"endColumn":25},{"ruleId":"52","severity":1,"message":"64","line":5,"column":11,"nodeType":"54","messageId":"55","endLine":5,"endColumn":16},{"ruleId":"52","severity":1,"message":"63","line":11,"column":29,"nodeType":"54","messageId":"55","endLine":11,"endColumn":33},{"ruleId":"52","severity":1,"message":"65","line":26,"column":12,"nodeType":"54","messageId":"55","endLine":26,"endColumn":18},{"ruleId":"52","severity":1,"message":"66","line":26,"column":20,"nodeType":"54","messageId":"55","endLine":26,"endColumn":29},"@typescript-eslint/no-unused-vars","'JwtDecodeOptions' is defined but never used.","Identifier","unusedVar","no-native-reassign",["67"],"no-negated-in-lhs",["68"],"'useQuery' is defined but never used.","'Link' is defined but never used.","'HELLO' is assigned a value but never used.","'data' is assigned a value but never used.","'Props' is defined but never used.","'isAuth' is assigned a value but never used.","'setIsAuth' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]